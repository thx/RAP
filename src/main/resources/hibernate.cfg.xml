<?xml version="1.0" encoding="UTF8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>*Mgr</value>
                <value>*Service</value>
                <value>*Proxy</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

    <import resource="classpath:/com/taobao/rigel/rap/common/applicationContext.xml"/>
    <import resource="classpath:/com/taobao/rigel/rap/project/applicationContext.xml"/>
    <import resource="classpath:/com/taobao/rigel/rap/workspace/applicationContext.xml"/>
    <import resource="classpath:/com/taobao/rigel/rap/account/applicationContext.xml"/>
    <import resource="classpath:/com/taobao/rigel/rap/mock/applicationContext.xml"/>
    <import resource="classpath:/com/taobao/rigel/rap/organization/applicationContext.xml"/>
    <import resource="classpath:/com/taobao/rigel/rap/api/applicationContext.xml"/>
    <import resource="classpath:/com/taobao/rigel/rap/platform/applicationContext.xml"/>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/config.properties</value>
            </list>
        </property>
    </bean>



    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="10" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />

        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->

        <property name="defaultAutoCommit" value="true" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 " />



    </bean>





    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mappingResources">
            <list>
                <value>com/taobao/rigel/rap/project/mapping/Project.hbm.xml</value>
                <value>com/taobao/rigel/rap/project/mapping/Module.hbm.xml</value>
                <value>com/taobao/rigel/rap/project/mapping/Page.hbm.xml</value>
                <value>com/taobao/rigel/rap/project/mapping/Action.hbm.xml</value>
                <value>com/taobao/rigel/rap/project/mapping/Parameter.hbm.xml</value>
                <value>com/taobao/rigel/rap/account/mapping/User.hbm.xml</value>
                <value>com/taobao/rigel/rap/account/mapping/Role.hbm.xml</value>
                <value>com/taobao/rigel/rap/account/mapping/Notification.hbm.xml</value>
                <value>com/taobao/rigel/rap/workspace/mapping/Workspace.hbm.xml</value>
                <value>com/taobao/rigel/rap/workspace/mapping/CheckIn.hbm.xml</value>
                <value>com/taobao/rigel/rap/organization/mapping/Corporation.hbm.xml</value>
                <value>com/taobao/rigel/rap/organization/mapping/Group.hbm.xml</value>
                <value>com/taobao/rigel/rap/organization/mapping/ProductionLine.hbm.xml</value>
                <value>com/taobao/rigel/rap/mock/mapping/Rule.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.enable_lazy_load_no_trans">true</prop>
            </props>
        </property>
    </bean>

    <bean id="baseDao" abstract="true">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <bean id="transactionInterceptor"
          class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <!--<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>-->
                <!--<prop key="is*">PROPAGATION_REQUIRED,readOnly</prop>-->
                <!--<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>-->
                <!--<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>-->
                <!--<prop key="can*">PROPAGATION_REQUIRED,readOnly</prop>-->
                <!--<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>-->
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

</beans>
